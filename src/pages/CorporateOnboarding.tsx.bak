import React, { useState } from 'react';
import Navbar from '@/components/Navbar';
import Footer from '@/components/Footer';
import { Link } from 'react-router-dom';
import { Button } from '@/components/ui/button';

const CorporateOnboarding = () => {
  const [activeStep, setActiveStep] = useState<string>('kyc');
  // Add state to track document uploads
  const [documentUploads, setDocumentUploads] = useState([
    { id: 1, type: '', file: null }
  ]);
  // Add state to track UBO entries
  const [uboEntries, setUboEntries] = useState([
    { id: 1 }, 
    { id: 2 }
  ]);
  // Add state to track Senior Management entries
  const [managementEntries, setManagementEntries] = useState([
    { id: 1 },
    { id: 2 },
    { id: 3 }
  ]);
  
  const steps = [
    { id: 'kyc', label: 'KYC Form', icon: 'clipboard-list' },
    { id: 'suitability', label: 'Suitability', icon: 'check-circle' },
    { id: 'classification', label: 'Client Classification', icon: 'users' },
    { id: 'fatca', label: 'FATCA', icon: 'document-text' },
    { id: 'documents', label: 'Upload Documents', icon: 'upload' }
  ];

  const renderIcon = (iconName: string, isCompleted: boolean, isActive: boolean) => {
    const iconColor = isCompleted ? 'text-green-500' : isActive ? 'text-[#0066FF]' : 'text-gray-400';
    
    switch(iconName) {
      case 'clipboard-list':
        return (
          <svg xmlns="http://www.w3.org/2000/svg" className={`h-6 w-6 ${iconColor}`} fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01" />
          </svg>
        );
      case 'check-circle':
        return (
          <svg xmlns="http://www.w3.org/2000/svg" className={`h-6 w-6 ${iconColor}`} fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
        );
      case 'users':
        return (
          <svg xmlns="http://www.w3.org/2000/svg" className={`h-6 w-6 ${iconColor}`} fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z" />
          </svg>
        );
      case 'document-text':
        return (
          <svg xmlns="http://www.w3.org/2000/svg" className={`h-6 w-6 ${iconColor}`} fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
          </svg>
        );
      case 'upload':
        return (
          <svg xmlns="http://www.w3.org/2000/svg" className={`h-6 w-6 ${iconColor}`} fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
          </svg>
        );
      default:
        return null;
    }
  };

  const getStepState = (stepId: string) => {
    const stepIndex = steps.findIndex(step => step.id === stepId);
    const activeIndex = steps.findIndex(step => step.id === activeStep);
    
    return {
      isActive: stepId === activeStep,
      isCompleted: stepIndex < activeIndex
    };
  };

  // Add a function to handle adding more document uploads
  const addMoreDocuments = () => {
    const newUpload = {
      id: documentUploads.length + 1,
      type: '',
      file: null
    };
    setDocumentUploads([...documentUploads, newUpload]);
  };

  return (
    <div className="min-h-screen flex flex-col bg-gray-50">
      <Navbar />
      
      <div className="flex-grow container mx-auto pt-24 pb-10 px-4 sm:px-6">
        <div className="bg-white shadow-md rounded-md p-6 max-w-5xl mx-auto border border-blue-200">
          {/* Removed Back to Home button */}
          
          <div className="border-b pb-4 mb-6">
            <h1 className="text-2xl text-gray-700 font-semibold">Corporate Client Onboarding</h1>
            {/* Removed Hilbert logo */}
          </div>
          
          {/* Progress Steps */}
          <div className="mb-8">
            <style>
              {`
                .step-label {
                  text-decoration: none !important;
                  border-bottom: none !important;
                }
                .step-label:hover {
                  text-decoration: none !important;
                }
              `}
            </style>
            <div className="flex flex-col md:flex-row justify-between items-start md:items-center">
              {steps.map((step, index) => {
                const { isActive, isCompleted } = getStepState(step.id);
                const stepClasses = `flex flex-col items-center justify-center ${index < steps.length - 1 ? 'mb-4 md:mb-0' : ''}`;
                
                return (
                  <div key={step.id} className={stepClasses}>
                    <button 
                      onClick={() => setActiveStep(step.id)} 
                      className={`flex flex-col items-center focus:outline-none ${isActive ? 'pointer-events-none' : 'cursor-pointer'}`}
                      style={{ textDecoration: 'none' }}
                    >
                      <div className={`rounded-full p-2 mb-2 ${
                        isCompleted 
                          ? 'bg-green-100 border-2 border-green-500' 
                          : isActive 
                            ? 'bg-[#EFF6FF] border-2 border-[#0066FF]' 
                            : 'bg-gray-100 border-2 border-gray-300'
                      }`}>
                        {renderIcon(step.icon, isCompleted, isActive)}
                      </div>
                      <span 
                        className={`text-sm font-medium no-underline step-label ${
                          isCompleted 
                            ? 'text-green-600' 
                            : isActive 
                              ? 'text-[#0066FF]' 
                              : 'text-gray-500'
                        }`}
                        style={{ textDecoration: 'none', borderBottom: 'none' }}
                      >
                        {step.label}
                      </span>
                    </button>
                    
                    {/* Connector line */}
                    {index < steps.length - 1 && (
                      <div className="hidden md:block w-20 h-0.5 mx-2 bg-gray-300 self-center"></div>
                    )}
                  </div>
                );
              })}
            </div>
          </div>
          
          {/* Step Content */}
          <div className="mb-6 p-6 border border-gray-200 rounded-md">
            {activeStep === 'kyc' && (
              <div>
                <h2 className="text-lg font-semibold mb-4">Know Your Customer â€“ Corporate Due Diligence Form</h2>
                <div className="space-y-6">
                  {/* Content shortened for brevity */}
                </div>
              </div>
            )}
            
            {activeStep === 'suitability' && (
              <div>
                <h2 className="text-lg font-semibold mb-4">Suitability Assessment Questionnaire</h2>
                <div className="space-y-6">
                  {/* Content shortened for brevity */}
                </div>
              </div>
            )}
            
            {activeStep === 'classification' && (
              <div>
                <div className="space-y-6">
                  {/* Content shortened for brevity */}
                </div>
              </div>
            )}
            
            {activeStep === 'fatca' && (
              <div>
                <h2 className="text-lg font-semibold mb-4">FATCA Declaration</h2>
                <div className="space-y-6">
                  {/* Content shortened for brevity */}
                </div>
              </div>
            )}
            
            {activeStep === 'documents' && (
              <div>
                <h2 className="text-lg font-semibold mb-4">Document Upload</h2>
                <div className="space-y-6">
                  {/* Content shortened for brevity */}
                </div>
              </div>
            )}
          </div>
          
          {/* Navigation Buttons */}
          <div className="flex justify-between">
            <Button 
              variant="outline" 
              className="text-gray-600 hover:text-gray-900 border-gray-300"
              onClick={() => {
                const currentIndex = steps.findIndex(step => step.id === activeStep);
                if (currentIndex > 0) {
                  setActiveStep(steps[currentIndex - 1].id);
                }
              }}
              disabled={activeStep === steps[0].id}
            >
              Previous
            </Button>
            
            <div className="flex space-x-3">
              <Button 
                variant="outline"
                className="text-[#0066FF] hover:text-[#0055DD] border-[#0066FF]"
                onClick={() => {
                  // Save draft logic would go here
                  alert('Draft saved successfully!');
                }}
              >
                Save draft
              </Button>
              
              <Button 
                className="bg-[#0066FF] hover:bg-[#0055DD] text-white"
                onClick={() => {
                  const currentIndex = steps.findIndex(step => step.id === activeStep);
                  if (currentIndex < steps.length - 1) {
                    setActiveStep(steps[currentIndex + 1].id);
                  } else {
                    // Submit form logic would go here
                    alert('Form submitted successfully!');
                  }
                }}
              >
                {activeStep === steps[steps.length - 1].id ? 'Submit' : 'Next'}
              </Button>
            </div>
          </div>
        </div>
      </div>
      
      <div className="text-center">
        <p className="text-sm text-[#0066FF] font-thin italic mb-2">
          Hilbert Investment Solutions Ltd is regulated by the Dubai Financial Services Authority (DFSA) for the conduct of its business in and from the Dubai International Financial Centre (DIFC)
        </p>
      </div>
      <Footer />
    </div>
  );
};

export default CorporateOnboarding; 